{{ define "dto" }}
	// {{.Name}} is a data transfer object
	{{ range .Comments -}}
	// {{.}}
	{{ end -}}
	type {{.Name}} struct {
		{{- range .Fields -}}
		{{- if .IsDTO }}
			{{- if .Embedded }}
				{{.Name}}
			{{- else }}
				{{.Name}} {{.Type}} {{ if gt (len .Tags) 0 }}`{{ range .Tags -}}{{.Name}}:"{{.Value}}"{{- end }}`{{- end }}
			{{- end }}
		{{- else }}
			{{.Name}} {{.Type}} {{ if gt (len .Tags) 0 }}`{{ range .Tags -}}{{.Name}}:"{{.Value}}"{{- end }}`{{- end }}
		{{- end }}
		{{- end }}
	}
{{ end }}
// Code generated by RonyKIT Stub Generator (Golang); DO NOT EDIT.

package {{.Pkg}}

import (
	"context"

	"github.com/clubpay/ronykit"
	"github.com/clubpay/ronykit/stub"
)

{{ range $dtoName, $dto := .DTOs }}
{{ template "dto" $dto }}
{{ end }}


{{$serviceName := .Name}}
// {{$serviceName}}Stub represents the client/stub for {{$serviceName}}.
type {{$serviceName}}Stub struct {
    hostPort string
    secure bool
    verifyTLS bool

		s *stub.Stub
}

func New{{$serviceName}}Stub(hostPort string, opts ...stub.Option) *{{$serviceName}}Stub {
    s := &{{$serviceName}}Stub{
			s: stub.New(hostPort, opts...),
		}

    return s
}

{{ range .RESTs }}
{{$methodName := .Name}}
{{- if ne $methodName "" }}
func (s {{$serviceName}}Stub) {{$methodName}}(req *{{.Request.Name}}) (*{{.Response.Name}}, *stub.Error){
	res := &{{.Response.Name}}{}
	err := s.s.REST().
		SetMethod("{{.Method}}").
		{{ range $idx, $errDto := .PossibleErrors }}
		SetResponseHandler(
			{{ $errDto.Code }},
			func(ctx context.Context, r stub.RESTResponse) *stub.Error {
				res := &{{$errDto.DTO.Name}}{}
				err := stub.WrapError(ronykit.UnmarshalMessage(r.GetBody(), res))
				if err != nil {
					return err
				}
				return stub.NewError(res.GetCode(), res.GetItem())
			},
		).
		{{- end }}
		DefaultResponseHandler(
			func(ctx context.Context, r stub.RESTResponse) *stub.Error {
				return stub.WrapError(ronykit.UnmarshalMessage(r.GetBody(), res))
			},
		).
		AutoRun("{{.Path}}", {{.Encoding}}, req).
		Err()
	if err != nil {
		return nil, err
	}

	return res, nil
}
{{ end }}
{{- end }}
