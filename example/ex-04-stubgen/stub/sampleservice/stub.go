// Code generated by RonyKIT Stub Generator (Golang); DO NOT EDIT.

package sampleservice

import (
	"context"
	"fmt"

	"github.com/clubpay/ronykit/kit"
	"github.com/clubpay/ronykit/kit/stub"
	"github.com/clubpay/ronykit/kit/utils/reflector"
)

var _ fmt.Stringer

func init() {
	reflector.Register(&ErrorMessage{}, "json")
	reflector.Register(&KeyValue{}, "json")
	reflector.Register(&VeryComplexRequest{}, "json")
	reflector.Register(&VeryComplexResponse{}, "json")
}

// ErrorMessage is a data transfer object
type ErrorMessage struct {
	Code int    `json:"code"`
	Item string `json:"item"`
}

func (x ErrorMessage) GetCode() int {
	return x.Code
}

func (x ErrorMessage) GetItem() string {
	return x.Item
}

// KeyValue is a data transfer object
type KeyValue struct {
	Key   string `json:"key"`
	Value int    `json:"value"`
}

// VeryComplexRequest is a data transfer object
type VeryComplexRequest struct {
	Key1      string             `json:"key1"`
	Key1Ptr   *string            `json:"key1Ptr"`
	MapKey1   map[string]int     `json:"mapKey1"`
	MapKey2   map[int64]KeyValue `json:"mapKey2"`
	SliceKey1 []bool             `json:"sliceKey1"`
	SliceKey2 []*KeyValue        `json:"sliceKey2"`
}

// VeryComplexResponse is a data transfer object
type VeryComplexResponse struct {
	Key1      string              `json:"key1"`
	Key1Ptr   *string             `json:"key1Ptr"`
	MapKey1   map[string]int      `json:"mapKey1"`
	MapKey2   map[int64]*KeyValue `json:"mapKey2"`
	SliceKey1 []uint8             `json:"sliceKey1"`
	SliceKey2 []KeyValue          `json:"sliceKey2"`
}

type ISampleServiceStub interface {
	ComplexDummy(
		ctx context.Context, req *VeryComplexRequest, opt ...stub.RESTOption,
	) (*VeryComplexResponse, *stub.Error)
}

// SampleServiceStub represents the client/stub for SampleService.
// Implements ISampleServiceStub
type SampleServiceStub struct {
	hostPort  string
	secure    bool
	verifyTLS bool

	s *stub.Stub
}

func NewSampleServiceStub(hostPort string, opts ...stub.Option) *SampleServiceStub {
	s := &SampleServiceStub{
		s: stub.New(hostPort, opts...),
	}

	return s
}

var _ ISampleServiceStub = (*SampleServiceStub)(nil)

func (s SampleServiceStub) ComplexDummy(
	ctx context.Context, req *VeryComplexRequest, opt ...stub.RESTOption,
) (*VeryComplexResponse, *stub.Error) {
	res := &VeryComplexResponse{}
	httpCtx := s.s.REST(opt...).
		SetMethod("POST").
		SetResponseHandler(
			400,
			func(ctx context.Context, r stub.RESTResponse) *stub.Error {
				res := &ErrorMessage{}
				err := stub.WrapError(kit.UnmarshalMessage(r.GetBody(), res))
				if err != nil {
					return err
				}

				return stub.NewErrorWithMsg(res)
			},
		).
		DefaultResponseHandler(
			func(ctx context.Context, r stub.RESTResponse) *stub.Error {
				return stub.WrapError(kit.UnmarshalMessage(r.GetBody(), res))
			},
		).
		AutoRun(ctx, "/complexDummy", kit.JSON, req)
	defer httpCtx.Release()

	if err := httpCtx.Err(); err != nil {
		return nil, err
	}

	return res, nil
}

type MockOption func(*SampleServiceStubMock)

func MockComplexDummy(
	f func(ctx context.Context, req *VeryComplexRequest, opt ...stub.RESTOption) (*VeryComplexResponse, *stub.Error),
) MockOption {
	return func(sm *SampleServiceStubMock) {
		sm.complexdummy = f
	}
}

// SampleServiceStubMock represents the mocked for client/stub for SampleService.
// Implements ISampleServiceStub
type SampleServiceStubMock struct {
	complexdummy func(ctx context.Context, req *VeryComplexRequest, opt ...stub.RESTOption) (*VeryComplexResponse, *stub.Error)
}

func NewSampleServiceStubMock(opts ...MockOption) *SampleServiceStubMock {
	s := &SampleServiceStubMock{}
	for _, o := range opts {
		o(s)
	}

	return s
}

var _ ISampleServiceStub = (*SampleServiceStubMock)(nil)

func (s SampleServiceStubMock) ComplexDummy(
	ctx context.Context, req *VeryComplexRequest, opt ...stub.RESTOption,
) (*VeryComplexResponse, *stub.Error) {
	if s.complexdummy == nil {
		return nil, stub.WrapError(fmt.Errorf("method not mocked"))
	}

	return s.complexdummy(ctx, req, opt...)
}
